generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  passwordHash    String
  xpPoints        Int               @default(0)
  createdAt       DateTime          @default(now())
  answers         Answer[]
  examResults     ExamResult[]
  achievements    UserAchievement[]
  activityLogs    ActivityLog[]
}

model Topic {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  questions   Question[]
}

model Question {
  id            Int      @id @default(autoincrement())
  topicId       Int
  content       String
  correctAnswer String
  explanation   String?
  difficulty    Int
  createdAt     DateTime @default(now())
  topic         Topic    @relation(fields: [topicId], references: [id])
  answers       Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  answer     String
  isCorrect  Boolean
  topic      String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}

model ExamResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  score     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  achievementId String
  earnedAt      DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  details   Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}